/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.web.servlet.view;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;

import org.springframework.beans.BeanUtils;
import org.springframework.core.Ordered;
import org.springframework.util.CollectionUtils;
import org.springframework.util.PatternMatchUtils;
import org.springframework.web.servlet.View;

/**
 * Simple implementation of the {@link org.springframework.web.servlet.ViewResolver}
 * interface, allowing for direct resolution of symbolic view names to URLs,
 * without explicit mapping definition. This is useful if your symbolic names
 * match the names of your view resources in a straightforward manner
 * (i.e. the symbolic name is the unique part of the resource's filename),
 * without the need for a dedicated mapping to be defined for each view.
 * 
 * <p> {@link org.springframework.web.servlet.ViewResolver}接口的简单实现,
 * 允许直接将符号视图名称解析为URL，而无需显式映射定义。 如果您的符号名称以直接的方式与视图资源的名称
 * 匹配（即符号名称是资源文件名的唯一部分），则此选项非常有用，而无需为每个视图定义专用映射。
 *
 * <p>Supports {@link AbstractUrlBasedView} subclasses like {@link InternalResourceView},
 * {@link org.springframework.web.servlet.view.velocity.VelocityView} and
 * {@link org.springframework.web.servlet.view.freemarker.FreeMarkerView}.
 * The view class for all views generated by this resolver can be specified
 * via the "viewClass" property.
 * 
 * <p> 支持AbstractUrlBasedView的子类，如InternalResourceView，
 * org.springframework.web.servlet.view.velocity.VelocityView和
 * org.springframework.web.servlet.view.freemarker.FreeMarkerView。 
 * 可以通过“viewClass”属性指定此解析程序生成的所有视图的视图类。
 *
 * <p>View names can either be resource URLs themselves, or get augmented by a
 * specified prefix and/or suffix. Exporting an attribute that holds the
 * RequestContext to all views is explicitly supported.
 * 
 * <p> 视图名称可以是资源URL本身，也可以通过指定的前缀和/或后缀进行扩充。显式支持将包含RequestContext的属性导出到所有视图。
 *
 * <p>Example: prefix="/WEB-INF/jsp/", suffix=".jsp", viewname="test" ->
 * "/WEB-INF/jsp/test.jsp"
 * 
 * <p>例如: prefix="/WEB-INF/jsp/", suffix=".jsp", viewname="test" ->
 * "/WEB-INF/jsp/test.jsp"
 *
 * <p>As a special feature, redirect URLs can be specified via the "redirect:"
 * prefix. E.g.: "redirect:myAction.do" will trigger a redirect to the given
 * URL, rather than resolution as standard view name. This is typically used
 * for redirecting to a controller URL after finishing a form workflow.
 * 
 * <p> 作为一项特殊功能，可以通过“redirect：”前缀指定重定向URL。 例如："redirect：myAction.do"
 * 将触发重定向到给定的URL，而不是作为标准视图名称的解析。 这通常用于在完成表单工作流后重定向到控制器URL。
 *
 * <p>Furthermore, forward URLs can be specified via the "forward:" prefix. E.g.:
 * "forward:myAction.do" will trigger a forward to the given URL, rather than
 * resolution as standard view name. This is typically used for controller URLs;
 * it is not supposed to be used for JSP URLs - use logical view names there.
 * 
 * <p> 此外，可以通过“forward：”前缀指定转发URL。 例如：“forward：myAction.do”将触发转发到给定的URL，
 * 而不是作为标准视图名称的解析。 这通常用于控制器URL; 它不应该用于JSP URL  - 在那里使用逻辑视图名称。
 *
 * <p>Note: This class does not support localized resolution, i.e. resolving
 * a symbolic view name to different resources depending on the current locale.
 * 
 * <p> 注意：此类不支持本地化解析，即根据当前区域设置将符号视图名称解析为不同的资源。
 *
 * <p><b>Note:</b> When chaining ViewResolvers, a UrlBasedViewResolver will check whether
 * the {@link AbstractUrlBasedView#checkResource specified resource actually exists}.
 * However, with {@link InternalResourceView}, it is not generally possible to
 * determine the existence of the target resource upfront. In such a scenario,
 * a UrlBasedViewResolver will always return View for any given view name;
 * as a consequence, it should be configured as the last ViewResolver in the chain.
 * 
 * <p> 注意：链接ViewResolvers时，UrlBasedViewResolver将检查指定的资源是否确实存在。 但是，
 * 使用InternalResourceView，通常无法预先确定目标资源的存在。 在这种情况下，
 * UrlBasedViewResolver将始终为任何给定的视图名称返回View; 因此，它应该被配置为链中的最后一个ViewResolver。
 *
 * @author Juergen Hoeller
 * @author Rob Harrop
 * @since 13.12.2003
 * @see #setViewClass
 * @see #setPrefix
 * @see #setSuffix
 * @see #setRequestContextAttribute
 * @see #REDIRECT_URL_PREFIX
 * @see AbstractUrlBasedView
 * @see InternalResourceView
 * @see org.springframework.web.servlet.view.velocity.VelocityView
 * @see org.springframework.web.servlet.view.freemarker.FreeMarkerView
 */
public class UrlBasedViewResolver extends AbstractCachingViewResolver implements Ordered {

	/**
	 * Prefix for special view names that specify a redirect URL (usually
	 * to a controller after a form has been submitted and processed).
	 * Such view names will not be resolved in the configured default
	 * way but rather be treated as special shortcut.
	 * 
	 * <p> 指定重定向URL的特殊视图名称的前缀（通常在提交和处理表单后指向控制器）。 此类视图名称不会以配置的默认方式解析，
	 * 而是被视为特殊快捷方式。
	 */
	public static final String REDIRECT_URL_PREFIX = "redirect:";

	/**
	 * Prefix for special view names that specify a forward URL (usually
	 * to a controller after a form has been submitted and processed).
	 * Such view names will not be resolved in the configured default
	 * way but rather be treated as special shortcut.
	 * 
	 * <p> 指定转发URL的特殊视图名称的前缀（通常在提交和处理表单后发送给控制器）。 
	 * 此类视图名称不会以配置的默认方式解析，而是被视为特殊快捷方式。
	 */
	public static final String FORWARD_URL_PREFIX = "forward:";


	private Class<?> viewClass;

	private String prefix = "";

	private String suffix = "";

	private String contentType;

	private boolean redirectContextRelative = true;

	private boolean redirectHttp10Compatible = true;

	private String requestContextAttribute;

	/** Map of static attributes, keyed by attribute name (String) */
	private final Map<String, Object> staticAttributes = new HashMap<String, Object>();

	private Boolean exposePathVariables;

	private String[] viewNames;

	private int order = Integer.MAX_VALUE;


	/**
	 * Set the view class that should be used to create views.
	 * 
	 * <p> 设置应该用于创建视图的视图类。
	 * 
	 * @param viewClass class that is assignable to the required view class
	 * (by default, AbstractUrlBasedView)
	 * 
	 * <p> 可分配给所需视图类的类（默认情况下为AbstractUrlBasedView）
	 * 
	 * @see AbstractUrlBasedView
	 */
	public void setViewClass(Class<?> viewClass) {
		if (viewClass == null || !requiredViewClass().isAssignableFrom(viewClass)) {
			throw new IllegalArgumentException(
					"Given view class [" + (viewClass != null ? viewClass.getName() : null) +
					"] is not of type [" + requiredViewClass().getName() + "]");
		}
		this.viewClass = viewClass;
	}

	/**
	 * Return the view class to be used to create views.
	 * 
	 * <p> 返回用于创建视图的视图类。
	 */
	protected Class<?> getViewClass() {
		return this.viewClass;
	}

	/**
	 * Return the required type of view for this resolver.
	 * This implementation returns AbstractUrlBasedView.
	 * 
	 * <p> 返回此解析程序所需的视图类型。 此实现返回AbstractUrlBasedView。
	 * 
	 * @see AbstractUrlBasedView
	 */
	protected Class<?> requiredViewClass() {
		return AbstractUrlBasedView.class;
	}

	/**
	 * Set the prefix that gets prepended to view names when building a URL.
	 * 
	 * <p> 设置在构建URL时前缀为查看名称的前缀。
	 */
	public void setPrefix(String prefix) {
		this.prefix = (prefix != null ? prefix : "");
	}

	/**
	 * Return the prefix that gets prepended to view names when building a URL.
	 * 
	 * <p> 返回在构建URL时前缀为查看名称的前缀。
	 */
	protected String getPrefix() {
		return this.prefix;
	}

	/**
	 * Set the suffix that gets appended to view names when building a URL.
	 * 
	 * <p> 设置在构建URL时附加到视图名称的后缀。
	 */
	public void setSuffix(String suffix) {
		this.suffix = (suffix != null ? suffix : "");
	}

	/**
	 * Return the suffix that gets appended to view names when building a URL.
	 * 
	 * <p> 返回在构建URL时附加到视图名称的后缀。
	 */
	protected String getSuffix() {
		return this.suffix;
	}

	/**
	 * Set the content type for all views.
	 * 
	 * <p> 设置所有视图的内容类型。
	 * 
	 * <p>May be ignored by view classes if the view itself is assumed
	 * to set the content type, e.g. in case of JSPs.
	 * 
	 * <p> 如果假定视图本身设置内容类型，则视图类可以忽略。 在JSP的情况下。
	 */
	public void setContentType(String contentType) {
		this.contentType = contentType;
	}

	/**
	 * Return the content type for all views, if any.
	 * 
	 * <p> 返回所有视图的内容类型（如果有）。
	 */
	protected String getContentType() {
		return this.contentType;
	}

	/**
	 * Set whether to interpret a given redirect URL that starts with a
	 * slash ("/") as relative to the current ServletContext, i.e. as
	 * relative to the web application root.
	 * 
	 * <p> 设置是否将以斜杠（“/”）开头的给定重定向URL解释为相对于当前ServletContext，即相对于Web应用程序根目录。
	 * 
	 * <p>Default is "true": A redirect URL that starts with a slash will be
	 * interpreted as relative to the web application root, i.e. the context
	 * path will be prepended to the URL.
	 * 
	 * <p> 默认值为“true”：以斜杠开头的重定向URL将被解释为相对于Web应用程序根目录，即上下文路径将被添加到URL之前。
	 * 
	 * <p><b>Redirect URLs can be specified via the "redirect:" prefix.</b>
	 * E.g.: "redirect:myAction.do"
	 * 
	 * <p> 可以通过“redirect：”前缀指定重定向URL。 例如：“redirect：myAction.do”
	 * 
	 * @see RedirectView#setContextRelative
	 * @see #REDIRECT_URL_PREFIX
	 */
	public void setRedirectContextRelative(boolean redirectContextRelative) {
		this.redirectContextRelative = redirectContextRelative;
	}

	/**
	 * Return whether to interpret a given redirect URL that starts with a
	 * slash ("/") as relative to the current ServletContext, i.e. as
	 * relative to the web application root.
	 * 
	 * <p> 返回是否将以斜杠（“/”）开头的给定重定向URL解释为相对于当前ServletContext，即相对于Web应用程序根目录。
	 * 
	 */
	protected boolean isRedirectContextRelative() {
		return this.redirectContextRelative;
	}

	/**
	 * Set whether redirects should stay compatible with HTTP 1.0 clients.
	 * 
	 * <p> 设置重定向是否应与HTTP 1.0客户端保持兼容。
	 * 
	 * <p>In the default implementation, this will enforce HTTP status code 302
	 * in any case, i.e. delegate to {@code HttpServletResponse.sendRedirect}.
	 * Turning this off will send HTTP status code 303, which is the correct
	 * code for HTTP 1.1 clients, but not understood by HTTP 1.0 clients.
	 * 
	 * <p> 在默认实现中，这将在任何情况下强制执行HTTP状态代码302，即委托给
	 * HttpServletResponse.sendRedirect。 关闭它将发送HTTP状态代码303，这是HTTP 1.1客户端的正确代码，
	 * 但HTTP 1.0客户端无法理解。
	 * 
	 * <p>Many HTTP 1.1 clients treat 302 just like 303, not making any
	 * difference. However, some clients depend on 303 when redirecting
	 * after a POST request; turn this flag off in such a scenario.
	 * 
	 * <p> 许多HTTP 1.1客户端就像303一样对待302，没有任何区别。 但是，一些客户端在POST请求后重定向时依赖于303; 
	 * 在这种情况下关闭此标志。
	 * 
	 * <p><b>Redirect URLs can be specified via the "redirect:" prefix.</b>
	 * E.g.: "redirect:myAction.do"
	 * 
	 * <p> 可以通过“redirect：”前缀指定重定向URL。 例如：“redirect：myAction.do”
	 * 
	 * @see RedirectView#setHttp10Compatible
	 * @see #REDIRECT_URL_PREFIX
	 */
	public void setRedirectHttp10Compatible(boolean redirectHttp10Compatible) {
		this.redirectHttp10Compatible = redirectHttp10Compatible;
	}

	/**
	 * Return whether redirects should stay compatible with HTTP 1.0 clients.
	 * 
	 * <p> 返回重定向是否应与HTTP 1.0客户端保持兼容。
	 */
	protected boolean isRedirectHttp10Compatible() {
		return this.redirectHttp10Compatible;
	}

	/**
	 * Set the name of the RequestContext attribute for all views.
	 * 
	 * <p> 为所有视图设置RequestContext属性的名称。
	 * 
	 * @param requestContextAttribute name of the RequestContext attribute
	 * 
	 * <p> RequestContext属性的名称
	 * 
	 * @see AbstractView#setRequestContextAttribute
	 */
	public void setRequestContextAttribute(String requestContextAttribute) {
		this.requestContextAttribute = requestContextAttribute;
	}

	/**
	 * Return the name of the RequestContext attribute for all views, if any.
	 * 
	 * <p> 返回所有视图的RequestContext属性的名称（如果有）。
	 * 
	 */
	protected String getRequestContextAttribute() {
		return this.requestContextAttribute;
	}

	/**
	 * Set static attributes from a {@code java.util.Properties} object,
	 * for all views returned by this resolver.
	 * 
	 * <p> 对于此解析程序返回的所有视图，从java.util.Properties对象设置静态属性。
	 * 
	 * <p>This is the most convenient way to set static attributes. Note that
	 * static attributes can be overridden by dynamic attributes, if a value
	 * with the same name is included in the model.
	 * 
	 * <p> 这是设置静态属性最方便的方法。 请注意，如果模型中包含具有相同名称的值，则静态属性可以被动态属性覆盖。
	 * 
	 * <p>Can be populated with a String "value" (parsed via PropertiesEditor)
	 * or a "props" element in XML bean definitions.
	 * 
	 * <p> 可以使用String“value”（通过PropertiesEditor解析）或XML bean定义中的“props”元素填充。
	 * 
	 * @see org.springframework.beans.propertyeditors.PropertiesEditor
	 * @see AbstractView#setAttributes
	 */
	public void setAttributes(Properties props) {
		CollectionUtils.mergePropertiesIntoMap(props, this.staticAttributes);
	}

	/**
	 * Set static attributes from a Map, for all views returned by this resolver.
	 * This allows to set any kind of attribute values, for example bean references.
	 * 
	 * <p> 对于此解析程序返回的所有视图，从Map设置静态属性。 这允许设置任何类型的属性值，例如bean引用。
	 * 
	 * <p>Can be populated with a "map" or "props" element in XML bean definitions.
	 * 
	 * <p> 可以在XML bean定义中使用“map”或“props”元素填充。
	 * 
	 * @param attributes Map with name Strings as keys and attribute objects as values
	 * 
	 * <p> 使用名称将字符串映射为键，将属性对象映射为值
	 * 
	 * @see AbstractView#setAttributesMap
	 */
	public void setAttributesMap(Map<String, ?> attributes) {
		if (attributes != null) {
			this.staticAttributes.putAll(attributes);
		}
	}

	/**
	 * Allow Map access to the static attributes for views returned by
	 * this resolver, with the option to add or override specific entries.
	 * 
	 * <p> 允许Map访问此解析程序返回的视图的静态属性，并可选择添加或覆盖特定条目。
	 * 
	 * <p>Useful for specifying entries directly, for example via
	 * "attributesMap[myKey]". This is particularly useful for
	 * adding or overriding entries in child view definitions.
	 * 
	 * <p> 用于直接指定条目，例如通过“attributesMap [myKey]”。 这对于在子视图定义中添加或覆盖条目特别有用。
	 */
	public Map<String, Object> getAttributesMap() {
		return this.staticAttributes;
	}

	/**
	 * Specify whether views resolved by this resolver should add path variables to the model or not.
	 * 
	 * <p> 指定此解析程序解析的视图是否应将路径变量添加到模型中。
	 * 
	 * <p>The default setting is to let each View decide (see {@link AbstractView#setExposePathVariables}.
	 * However, you can use this property to override that.
	 * 
	 * <p> 默认设置是让每个View决定（请参阅AbstractView.setExposePathVariables。但是，您可以使用此属性来覆盖它。
	 * 
	 * @param exposePathVariables
	 * <ul>
	 * <li>{@code true} - all Views resolved by this resolver will expose path variables
	 * <li> 
	 * <li> true  - 此解析程序解析的所有视图都将公开路径变量
	 * <li> 
	 * <li>{@code false} - no Views resolved by this resolver will expose path variables
	 * <li> 
	 * <li> false  - 此解析程序解析的视图不会公开路径变量
	 * <li> 
	 * <li>{@code null} - individual Views can decide for themselves (this is used by the default)
	 * <li> 
	 * <li> null  - 各个视图可以自行决定（默认使用）
	 * <ul>
	 * @see AbstractView#setExposePathVariables
	 */
	public void setExposePathVariables(Boolean exposePathVariables) {
		this.exposePathVariables = exposePathVariables;
	}

	/**
	 * Return whether views resolved by this resolver should add path variables to the model or not.
	 * 
	 * <p> 返回此解析程序解析的视图是否应将路径变量添加到模型中。
	 */
	protected Boolean getExposePathVariables() {
		return this.exposePathVariables;
	}

	/**
	 * Set the view names (or name patterns) that can be handled by this
	 * {@link org.springframework.web.servlet.ViewResolver}. View names can contain
	 * simple wildcards such that 'my*', '*Report' and '*Repo*' will all match the
	 * view name 'myReport'.
	 * 
	 * <p> 设置此org.springframework.web.servlet.ViewResolver可以处理的视图名称（或名称模式）。 
	 * 视图名称可以包含简单的通配符，以便“my *”，“* Report”和“* Repo *”都匹配视图名称“myReport”。
	 * 
	 * @see #canHandle
	 */
	public void setViewNames(String... viewNames) {
		this.viewNames = viewNames;
	}

	/**
	 * Return the view names (or name patterns) that can be handled by this
	 * {@link org.springframework.web.servlet.ViewResolver}.
	 * 
	 * <p> 返回此org.springframework.web.servlet.ViewResolver可以处理的视图名称（或名称模式）。
	 */
	protected String[] getViewNames() {
		return this.viewNames;
	}

	/**
	 * Set the order in which this {@link org.springframework.web.servlet.ViewResolver}
	 * is evaluated.
	 * 
	 * <p> 设置评估org.springframework.web.servlet.ViewResolver的顺序。
	 */
	public void setOrder(int order) {
		this.order = order;
	}

	/**
	 * Return the order in which this {@link org.springframework.web.servlet.ViewResolver}
	 * is evaluated.
	 * 
	 * <p> 返回评估此org.springframework.web.servlet.ViewResolver的顺序。
	 */
	public int getOrder() {
		return this.order;
	}

	@Override
	protected void initApplicationContext() {
		super.initApplicationContext();
		if (getViewClass() == null) {
			throw new IllegalArgumentException("Property 'viewClass' is required");
		}
	}


	/**
	 * This implementation returns just the view name,
	 * as this ViewResolver doesn't support localized resolution.
	 */
	@Override
	protected Object getCacheKey(String viewName, Locale locale) {
		return viewName;
	}

	/**
	 * Overridden to implement check for "redirect:" prefix.
	 * 
	 * <p> 重写以实现“redirect：”前缀的检查。
	 * 
	 * <p>Not possible in {@code loadView}, since overridden
	 * {@code loadView} versions in subclasses might rely on the
	 * superclass always creating instances of the required view class.
	 * 
	 * <p> 在loadView中不可能，因为子类中重写的loadView版本可能依赖于超类始终创建所需视图类的实例。
	 * 
	 * @see #loadView
	 * @see #requiredViewClass
	 */
	@Override
	protected View createView(String viewName, Locale locale) throws Exception {
		// If this resolver is not supposed to handle the given view,
		// return null to pass on to the next resolver in the chain.
		// 如果此解析程序不应处理给定视图，则返回null以传递给链中的下一个解析程序。
		if (!canHandle(viewName, locale)) {
			return null;
		}
		// Check for special "redirect:" prefix.
		// 检查特殊的“redirect：”前缀。
		if (viewName.startsWith(REDIRECT_URL_PREFIX)) {
			String redirectUrl = viewName.substring(REDIRECT_URL_PREFIX.length());
			RedirectView view = new RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());
			return applyLifecycleMethods(viewName, view);
		}
		// Check for special "forward:" prefix.
		// 检查特殊的“forward：”前缀。
		if (viewName.startsWith(FORWARD_URL_PREFIX)) {
			String forwardUrl = viewName.substring(FORWARD_URL_PREFIX.length());
			return new InternalResourceView(forwardUrl);
		}
		// Else fall back to superclass implementation: calling loadView.
		// 否则回退到超类实现：调用loadView。
		return super.createView(viewName, locale);
	}

	/**
	 * Indicates whether or not this {@link org.springframework.web.servlet.ViewResolver} can
	 * handle the supplied view name. If not, {@link #createView(String, java.util.Locale)} will
	 * return {@code null}. The default implementation checks against the configured
	 * {@link #setViewNames view names}.
	 * 
	 * <p> 指示此org.springframework.web.servlet.ViewResolver是否可以处理提供的视图名称。 
	 * 如果没有，createView（String，java.util.Locale）将返回null。 默认实现检查配置的视图名称。
	 * 
	 * @param viewName the name of the view to retrieve - 要检索的视图的名称
	 * @param locale the Locale to retrieve the view for - 用于检索视图的Locale
	 * @return whether this resolver applies to the specified view
	 * 
	 * <p> 此解析程序是否适用于指定的视图
	 * 
	 * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String)
	 */
	protected boolean canHandle(String viewName, Locale locale) {
		String[] viewNames = getViewNames();
		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName));
	}

	/**
	 * Delegates to {@code buildView} for creating a new instance of the
	 * specified view class, and applies the following Spring lifecycle methods
	 * (as supported by the generic Spring bean factory):
	 * 
	 * <p> 委托buildView创建指定视图类的新实例，并应用以下Spring生命周期方法（由通用Spring bean工厂支持）：
	 * 
	 * <ul>
	 * <li>ApplicationContextAware's {@code setApplicationContext}
	 * <li>InitializingBean's {@code afterPropertiesSet}
	 * </ul>
	 * @param viewName the name of the view to retrieve - 要检索的视图的名称
	 * @return the View instance
	 * @throws Exception if the view couldn't be resolved - 如果视图无法解决
	 * @see #buildView(String)
	 * @see org.springframework.context.ApplicationContextAware#setApplicationContext
	 * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet
	 */
	@Override
	protected View loadView(String viewName, Locale locale) throws Exception {
		AbstractUrlBasedView view = buildView(viewName);
		View result = applyLifecycleMethods(viewName, view);
		return (view.checkResource(locale) ? result : null);
	}

	private View applyLifecycleMethods(String viewName, AbstractView view) {
		return (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, viewName);
	}

	/**
	 * Creates a new View instance of the specified view class and configures it.
	 * Does <i>not</i> perform any lookup for pre-defined View instances.
	 * 
	 * <p> 创建指定视图类的新View实例并进行配置。 不对预定义的View实例执行任何查找。
	 * 
	 * <p>Spring lifecycle methods as defined by the bean container do not have to
	 * be called here; those will be applied by the {@code loadView} method
	 * after this method returns.
	 * 
	 * <p> 不必在此处调用bean容器定义的Spring生命周期方法; 这个方法返回后，将由loadView方法应用。
	 * 
	 * <p>Subclasses will typically call {@code super.buildView(viewName)}
	 * first, before setting further properties themselves. {@code loadView}
	 * will then apply Spring lifecycle methods at the end of this process.
	 * 
	 * <p> 子类通常首先调用super.buildView（viewName），然后再设置其他属性。 然后，
	 * loadView将在此过程结束时应用Spring生命周期方法。
	 * 
	 * @param viewName the name of the view to build - 要构建的视图的名称
	 * @return the View instance
	 * @throws Exception if the view couldn't be resolved - 如果视图无法解决
	 * @see #loadView(String, java.util.Locale)
	 */
	protected AbstractUrlBasedView buildView(String viewName) throws Exception {
		AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(getViewClass());
		view.setUrl(getPrefix() + viewName + getSuffix());

		String contentType = getContentType();
		if (contentType != null) {
			view.setContentType(contentType);
		}

		view.setRequestContextAttribute(getRequestContextAttribute());
		view.setAttributesMap(getAttributesMap());

		Boolean exposePathVariables = getExposePathVariables();
		if (exposePathVariables != null) {
			view.setExposePathVariables(exposePathVariables);
		}

		return view;
	}

}
