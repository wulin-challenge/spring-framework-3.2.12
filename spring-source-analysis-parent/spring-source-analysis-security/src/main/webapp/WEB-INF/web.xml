<!DOCTYPE web-app >

<web-app>
    <display-name>spring source analysis security</display-name>

	<!-- 使用ContextLoaderListener配置时,需要告诉它Spring配置文件的位置 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-security.xml;classpath:applicationContext.xml</param-value>
    </context-param>

	<!-- 
	    SpringMVC的前端控制器,当DispatcherServlet载入后,它将从一个XML文件中
	    载入Spring的应用上下文,该XML文件的名字取决于这里DispathcerServlet将试图从一个
	   叫做Springmvc-servlet.xml的文件中载入应用上下文,其默认位于WEB-INF目录下
	 -->
	 <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-servlet.xml</param-value>
        </init-param>
    </servlet>

	<!-- 
	注意: 下面的<url-pattern>/</url-pattern>与<url-pattern>/*</url-pattern>这两配置是不一样的,
	更加详细见文章: http://47.96.173.67:55555/notes/article/article_preview_index?id=325
	
	 -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
   
	<!-- 
	     配置上下文载入器,上下文载入器载入除DispatherServlet载入的配置文件之外的其他上下文配置文件
	  最常用的上下文载入器是一个Servlet监听器,器名称为ContextLoaderListener,它将启动spring的上下文  
	 -->

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- 
    spring mvc的Filter的执行都是由它委托的,它spring mvc中所有filter的起点
     -->
    <filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>
